# If the device is Battlemage, we need to set UBUNTU_VERSION to 24.10

# Usage: docker build --build-arg UBUNTU_VERSION=24.10 --build-arg PYTHON_VERSION=3.10 --build-arg GITHUB_TOKEN=github_token -t sglang:xpu_u2410 -f  Dockerfile.xpu --no-cache .


# Set default Ubuntu version to 24.04
ARG UBUNTU_VERSION=24.10
FROM ubuntu:$UBUNTU_VERSION

# Set environment variables
ARG UBUNTU_VERSION=24.10
ENV UBUNTU_VERSION=${UBUNTU_VERSION}
ENV DEBIAN_FRONTEND=noninteractive

# Set maintainer label
LABEL maintainer="zhaoqiong.zheng@intel.com"

# Define build arguments
ARG PYTHON_VERSION=3.10

# Install general packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        apt-utils \
        build-essential \
        openssl \
        ca-certificates \
        curl \
        jq \
        git \
        gnupg2 \
        gpg-agent \
        rsync \
        sudo \
        unzip \
        vim \
        wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Downgrade gcc version on ubuntu 24.10 OS for building PyTorch from source
RUN if [ "$UBUNTU_VERSION" = "24.10" ]; then \
        echo "UBUNTU_VERSION is 24.10, proceeding alternate gcc/g++ to gcc-13/g++-13 ..." && \
        apt-get update && \
        apt-get install -y gcc-13 g++-13 && \
        update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 200 && \
        update-alternatives --set gcc /usr/bin/gcc-13 && \
        update-alternatives --install /usr/bin/g++  g++ /usr/bin/g++-13 200 && \
        update-alternatives --set g++ /usr/bin/g++-13 && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*; \
fi

# Install Intel Driver based on Ubuntu version
RUN if [ "$UBUNTU_VERSION" = "24.10" ]; then \
        echo "UBUNTU_VERSION is 24.10, proceeding with driver installation..." && \
        apt-get update && \
        apt-get install -y software-properties-common && \
        add-apt-repository -y ppa:kobuk-team/intel-graphics && \
        apt-get install -y libze-intel-gpu1 libze1 intel-metrics-discovery intel-opencl-icd clinfo intel-gsc && \
        apt-get install -y intel-media-va-driver-non-free libmfx1 libmfx-gen1 libvpl2 libvpl-tools libva-glx2 va-driver-all vainfo && \
        apt-get install -y libze-dev intel-ocloc && \
        dpkg -l | grep libze &&\
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*; \
    elif [ "$UBUNTU_VERSION" = "24.04" ]; then \
        echo "UBUNTU_VERSION is 24.04, proceeding with driver installation..." && \
        apt-get update && \
        wget -qO - https://repositories.intel.com/gpu/intel-graphics.key | \
        sudo gpg --yes --dearmor --output /usr/share/keyrings/intel-graphics.gpg && \
        echo "deb [arch=amd64,i386 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/gpu/ubuntu noble unified" | \
        sudo tee /etc/apt/sources.list.d/intel-gpu-noble.list && \
        apt-get update && \
        apt-get install -y libze-intel-gpu1 libze1 intel-opencl-icd clinfo intel-gsc && \
        apt-get install -y libze-dev intel-ocloc && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*; \
fi

RUN echo "Installing Deep Learning Essetial for building PyTorch from source..." \
    apt-get update && \
    sudo apt install -y gpg-agent wget gnupg && \
    wget -qO- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | \
        sudo gpg --dearmor -o /usr/share/keyrings/oneapi-archive-keyring.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | \
        sudo tee /etc/apt/sources.list.d/oneAPI.list && \
    apt-get update && \
    apt-get install -y intel-deep-learning-essentials-2025.0 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*;

# Install Miniforge & PyTorch/Triton & build vllm/SGlang from source
RUN curl -fsSL -v -o miniforge.sh -O https://github.com/conda-forge/miniforge/releases/download/25.1.1-0/Miniforge3-Linux-x86_64.sh && \
    bash miniforge.sh -b -p ./miniforge3 && \
    rm miniforge.sh && \
    . ./miniforge3/bin/activate && \
    echo ${PYTHON_VERSION} | sed 's/\.//g' > /tmp/version.txt && \
    export PYTHON_VERSION_STRING=$(cat /tmp/version.txt) && \
    conda create -y -n py${PYTHON_VERSION_STRING} python=${PYTHON_VERSION} && conda activate py${PYTHON_VERSION_STRING} && \
    conda install pip && \
    echo ". /miniforge3/bin/activate; conda activate py${PYTHON_VERSION_STRING}; . /opt/intel/oneapi/setvars.sh; cd /root/" >> /root/.bashrc;
    

# Set the default shell to bash
SHELL ["bash", "-c"]
CMD ["bash", "-c", "source /root/.bashrc && exec bash"]
