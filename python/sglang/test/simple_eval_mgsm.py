# Adapted from https://github.com/openai/simple-evals/

"""
MGSM: Multilingual Grade School Math Benchmark (MGSM) is a benchmark of grade-school math problems.
Language Models are Multilingual Chain-of-Thought Reasoners
Freda Shi, Mirac Suzgun, Markus Freitag, Xuezhi Wang, Suraj Srivats, Soroush Vosoughi, Hyung Won Chung, Yi Tay, Sebastian Ruder, Denny Zhou, Dipanjan Das, Jason Wei
https://arxiv.org/abs/2210.03057 reference: https://github.com/google-research/url-nlp
"""

import re
import urllib
from typing import Optional

from sglang.test import simple_eval_common as common
from sglang.test.simple_eval_common import (
    HTML_JINJA,
    Eval,
    EvalResult,
    SamplerBase,
    SingleEvalResult,
)

ALL_LANGUAGES = ["bn", "de", "en", "es", "fr", "ja", "ru", "sw", "te", "th", "zh"]
LATIN_LANGUAGES = ["de", "en", "es", "fr", "sw"]
NON_LATIN_LANGUAGES = ["bn", "ja", "ru", "te", "th", "zh"]

LANG_TO_FPATH = {
    "bn": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_bn.tsv",
    "de": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_de.tsv",
    "en": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_en.tsv",
    "es": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_es.tsv",
    "fr": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_fr.tsv",
    "ja": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_ja.tsv",
    "ru": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_ru.tsv",
    "sw": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_sw.tsv",
    "te": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_te.tsv",
    "th": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_th.tsv",
    "zh": "https://openaipublic.blob.core.windows.net/simple-evals/mgsm_zh.tsv",
}
LANG_TO_INSTRUCTIONS = {
    "en": """Solve this math problem. Give the reasoning steps before giving the final answer on the last line by itself in the format of "Answer:". Do not add anything other than the integer answer after "Answer:".

{input}""",
    "bn": """à¦à¦‡ à¦—à¦£à¦¿à¦¤à§‡à¦° à¦¸à¦®à¦¸à§à¦¯à¦¾à¦Ÿà¦¿ à¦¸à¦®à¦¾à¦§à¦¾à¦¨ à¦•à¦°à§à¦¨à¥¤ à¦šà§‚à¦¡à¦¼à¦¾à¦¨à§à¦¤ à¦‰à¦¤à§à¦¤à¦° à¦¦à§‡à¦“à§Ÿà¦¾à¦° à¦†à¦—à§‡ à¦¯à§à¦•à§à¦¤à¦¿à¦¸à¦®à§à¦ªà¦¨à§à¦¨ à¦ªà¦¦à¦•à§à¦·à§‡à¦ª à¦ªà§à¦°à¦¦à¦¾à¦¨ à¦•à¦°à§à¦¨à¥¤ à¦šà§‚à¦¡à¦¼à¦¾à¦¨à§à¦¤ à¦‰à¦¤à§à¦¤à¦°à¦Ÿà¦¿ à¦à¦•à¦• à¦¸à¦‚à¦–à§à¦¯à¦¾ à¦¹à¦¿à¦¸à¦¾à¦¬à§‡ "à¦‰à¦¤à§à¦¤à¦°:" à¦à¦° à¦ªà¦°à§‡ à¦¶à§‡à¦· à¦²à¦¾à¦‡à¦¨à§‡ à¦¦à¦¿à¦¨à¥¤ "à¦‰à¦¤à§à¦¤à¦°:" à¦à¦° à¦ªà¦°à§‡ à¦…à¦¨à§à¦¯ à¦•à¦¿à¦›à§ à¦¯à§à¦•à§à¦¤ à¦•à¦°à¦¬à§‡à¦¨ à¦¨à¦¾à¥¤.

{input}""",
    "de": """LÃ¶se dieses Mathematikproblem. Gib die Schritte zur BegrÃ¼ndung an, bevor du die endgÃ¼ltige Antwort in der letzten Zeile alleine im Format "Antwort:" gibst. FÃ¼ge nichts anderes als die ganzzahlige Antwort nach "Antwort:" hinzu.

{input}""",
    "es": """Resuelve este problema matemÃ¡tico. Proporciona los pasos de razonamiento antes de dar la respuesta final en la Ãºltima lÃ­nea por sÃ­ misma en el formato de "Respuesta:". No aÃ±adas nada mÃ¡s que la respuesta entera despuÃ©s de "Respuesta:".

{input}""",
    "fr": """RÃ©solvez ce problÃ¨me de mathÃ©matiques. Donnez les Ã©tapes de raisonnement avant de fournir la rÃ©ponse finale sur la derniÃ¨re ligne elle-mÃªme dans le format de "RÃ©ponse:". N'ajoutez rien d'autre que la rÃ©ponse entiÃ¨re aprÃ¨s "RÃ©ponse:".

{input}""",
    "ja": """ã®æ•°å­¦ã®å•é¡Œã‚’è§£ã„ã¦ãã ã•ã„ã€‚æœ€çµ‚çš„ãªç­”ãˆã‚’å‡ºã™å‰ã«ã€è§£ç­”ã®æŽ¨è«–éŽç¨‹ã‚’è¨˜è¿°ã—ã¦ãã ã•ã„ã€‚ãã—ã¦æœ€å¾Œã®è¡Œã«ã¯ "ç­”ãˆ:" ã®å½¢å¼ã§ç­”ãˆã‚’è¨˜è¿°ã—ã€ãã®å¾Œã«ã¯æ•´æ•°ã®ç­”ãˆä»¥å¤–ä½•ã‚‚è¿½åŠ ã—ãªã„ã§ãã ã•ã„ã€‚

{input}""",
    "ru": """Ð ÐµÑˆÐ¸Ñ‚Ðµ ÑÑ‚Ñƒ Ð¼Ð°Ñ‚ÐµÐ¼Ð°Ñ‚Ð¸Ñ‡ÐµÑÐºÑƒÑŽ Ð·Ð°Ð´Ð°Ñ‡Ñƒ. ÐžÐ±ÑŠÑÑÐ½Ð¸Ñ‚Ðµ ÑˆÐ°Ð³Ð¸ Ñ€Ð°ÑÑÑƒÐ¶Ð´ÐµÐ½Ð¸Ñ Ð¿ÐµÑ€ÐµÐ´ Ñ‚ÐµÐ¼, ÐºÐ°Ðº Ð´Ð°Ñ‚ÑŒ Ð¾ÐºÐ¾Ð½Ñ‡Ð°Ñ‚ÐµÐ»ÑŒÐ½Ñ‹Ð¹ Ð¾Ñ‚Ð²ÐµÑ‚ Ð² Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÐµÐ¹ ÑÑ‚Ñ€Ð¾ÐºÐµ ÑÐ°Ð¼ Ð¿Ð¾ ÑÐµÐ±Ðµ Ð² Ñ„Ð¾Ñ€Ð¼Ð°Ñ‚Ðµ "ÐžÑ‚Ð²ÐµÑ‚:". ÐÐµ Ð´Ð¾Ð±Ð°Ð²Ð»ÑÐ¹Ñ‚Ðµ Ð½Ð¸Ñ‡ÐµÐ³Ð¾, ÐºÑ€Ð¾Ð¼Ðµ Ñ†ÐµÐ»Ð¾Ñ‡Ð¸ÑÐ»ÐµÐ½Ð½Ð¾Ð³Ð¾ Ð¾Ñ‚Ð²ÐµÑ‚Ð° Ð¿Ð¾ÑÐ»Ðµ "ÐžÑ‚Ð²ÐµÑ‚:".

{input}""",
    "sw": """Suluhisha tatizo hili la hesabu. Toa hatua za mantiki kabla ya kutoa jibu la mwisho kwenye mstari wa mwisho peke yake katika muundo wa "Jibu:". Usiongeze chochote kingine isipokuwa jibu la integer baada ya "Jibu:".

{input}""",
    "te": """à°ˆ à°—à°£à°¿à°¤ à°¸à°®à°¸à±à°¯à°¨à± à°ªà°°à°¿à°·à±à°•à°°à°¿à°‚à°šà°‚à°¡à°¿. à°šà°¿à°µà°°à°¿ à°¸à°®à°¾à°§à°¾à°¨à°¾à°¨à±à°¨à°¿ à°‡à°µà±à°µà°¦à°¾à°¨à°¿à°•à°¿ à°®à±à°‚à°¦à± à°¤à°°à±à°•à°¾à°¤à±à°®à°• à°…à°¦à±à°—à±à°²à°¨à± à°‡à°µà±à°µà°‚à°¡à°¿. à°šà°¿à°µà°°à°¿ à°ªà°‚à°•à±à°¤à°¿à°²à±‹ à°®à°¾à°¤à±à°°à°®à±‡ 'à°¸à°®à°¾à°§à°¾à°¨à°‚:' à°…à°¨à±‡ à°†à°•à°¾à°°à°‚à°²à±‹ à°šà°¿à°µà°°à°¿ à°¸à°®à°¾à°§à°¾à°¨à°¾à°¦à±à°¨à°¿ à°‡à°µà±à°µà°‚à°¡à°¿ à°¸à°®à°¾à°§à°¾à°¨à°‚: à°¤à°°à±à°µà°¾à°¤ à°ªà±‚à°°à±à°£à°¾à°‚à°• à°¸à°®à°¾à°§à°¾à°¨à°¾à°¨à°¿à°•à°¿ à°¤à°ªà±à°ªà°¿à°‚à°šà°¿ à°Žà°¦à±‡à°¨à°¾ à°šà±‡à°°à±à°šà°µà°¦à±à°¦à±.

{input}""",
    "th": """à¹à¸à¹‰à¸›à¸±à¸à¸«à¸²à¸„à¸“à¸´à¸•à¸¨à¸²à¸ªà¸•à¸£à¹Œà¸™à¸µà¹‰ à¹ƒà¸«à¹‰à¹ƒà¸«à¹‰à¸‚à¸±à¹‰à¸™à¸•à¸­à¸™à¸à¸²à¸£à¹ƒà¸Šà¹‰à¹€à¸«à¸•à¸¸à¸œà¸¥à¸à¹ˆà¸­à¸™à¸—à¸µà¹ˆà¸ˆà¸°à¹ƒà¸«à¹‰à¸„à¸³à¸•à¸­à¸šà¸ªà¸¸à¸”à¸—à¹‰à¸²à¸¢à¹ƒà¸™à¸šà¸£à¸£à¸—à¸±à¸”à¸ªà¸¸à¸”à¸—à¹‰à¸²à¸¢à¹‚à¸”à¸¢à¸­à¸¢à¸¹à¹ˆà¹ƒà¸™à¸£à¸¹à¸›à¹à¸šà¸š "à¸„à¸³à¸•à¸­à¸š:" à¹„à¸¡à¹ˆà¸„à¸§à¸£à¹€à¸žà¸´à¹ˆà¸¡à¸­à¸°à¹„à¸£à¸™à¸­à¸à¸ˆà¸²à¸à¸„à¸³à¸•à¸­à¸šà¸—à¸µà¹ˆà¹€à¸›à¹‡à¸™à¸ˆà¸³à¸™à¸§à¸™à¹€à¸•à¹‡à¸¡à¸«à¸¥à¸±à¸‡à¸ˆà¸²à¸ "à¸„à¸³à¸•à¸­à¸š:"

{input}""",
    "zh": """è§£å†³è¿™ä¸ªæ•°å­¦é—®é¢˜ã€‚åœ¨æœ€åŽä¸€è¡Œç»™å‡ºç­”æ¡ˆå‰ï¼Œè¯·æä¾›æŽ¨ç†æ­¥éª¤ã€‚æœ€åŽä¸€è¡Œåº”è¯¥ä»¥ "ç­”æ¡ˆ: " çš„å½¢å¼ç‹¬ç«‹ç»™å‡ºç­”æ¡ˆã€‚åœ¨ "ç­”æ¡ˆï¼š" åŽä¸è¦æ·»åŠ é™¤æ•´æ•°ç­”æ¡ˆä¹‹å¤–çš„ä»»ä½•å†…å®¹ã€‚

{input}""",
}

LANG_TO_ANSWER_PREFIX = {
    "en": "Answer",
    "bn": "à¦‰à¦¤à§à¦¤à¦°",
    "de": "Antwort",
    "es": "Respuesta",
    "fr": "RÃ©ponse",
    "ja": "ç­”ãˆ",
    "ru": "ÐžÑ‚Ð²ÐµÑ‚",
    "sw": "Jibu",
    "te": "à°¸à°®à°¾à°§à°¾à°¨à°‚",
    "th": "à¸„à¸³à¸•à¸­à¸š",
    "zh": "ç­”æ¡ˆ",
}


def parse_answer(answer: str, answer_prefix: str) -> str:
    if answer_prefix not in answer:
        return ""

    answer_text = answer.split(answer_prefix)[-1].strip()

    # find all the numbers (including decimals) in the string
    numbers = re.findall(r"\d+\.?\d*", answer_text.replace(",", ""))

    # return the first number (removing trailing decimal point if present),
    # or an empty string if there were no numbers
    return numbers[-1].rstrip(".") if numbers else ""


def score_mgsm(target: str, prediction: str) -> bool:
    if "." in prediction:
        prediction = prediction.rstrip("0").rstrip(".")

    target = target.replace(",", "")
    prediction = prediction.replace(",", "")

    return target == prediction


def get_lang_examples(lang: str) -> list[dict[str, str]]:
    fpath = LANG_TO_FPATH[lang]
    examples = []
    with urllib.request.urlopen(fpath) as f:
        for line in f.read().decode("utf-8").splitlines():
            inputs, targets = line.strip().split("\t")
            if "." in targets:
                raise ValueError(f"targets {targets} contains a decimal point.")
            # targets = int(targets.replace(",", ""))
            examples.append({"inputs": inputs, "targets": targets, "lang": lang})
    return examples


def get_all_examples() -> list[dict[str, str]]:
    examples = []
    for lang in ALL_LANGUAGES:
        if lang != "en":
            continue
        examples += get_lang_examples(lang)
    return examples


class MGSMEval(Eval):
    def __init__(
        self,
        num_examples_per_lang: int = 250,  # restrict to a subset of the data for debugging
        num_threads: int = 64,
        languages: Optional[list[str]] = ALL_LANGUAGES,
    ):
        if languages is None:
            languages = ALL_LANGUAGES
        else:
            for language in languages:
                if language not in ALL_LANGUAGES:
                    raise ValueError(
                        f"language {language} is not a valid language. "
                        f"It should be one in {ALL_LANGUAGES}"
                    )
        self._languages = languages
        self._num_examples_per_lang = num_examples_per_lang
        self._num_threads = num_threads

        examples = []
        for lang in self._languages:
            lang_examples = get_lang_examples(lang)
            examples.extend(lang_examples[: self._num_examples_per_lang])
        self.examples = examples

    def __call__(self, sampler: SamplerBase) -> EvalResult:
        """TODO: Add docstring."""
def fn(example: dict[str, str]):
            language = example["lang"]
            latin_language = (
                "group_latin" if language in LATIN_LANGUAGES else "group_non_latin"
            )
            correct_answer = example["targets"]
            instructoin = LANG_TO_INSTRUCTIONS[language]
            prompt_messages = [
                sampler._pack_message(
                    content=instructoin.format(input=example["inputs"]), role="user"
                )
            ]
            try:
                response_text = sampler(prompt_messages)
            except Exception as e:
                response_text = ""

            answer_prefix = LANG_TO_ANSWER_PREFIX[language]
            extracted_answer = parse_answer(response_text, answer_prefix)

            score = score_mgsm(correct_answer, extracted_answer)
            html = common.jinja_env.from_string(HTML_JINJA).render(
                prompt_messages=prompt_messages,
                next_message=dict(content=response_text, role="assistant"),
                score=score,
                correct_answer=correct_answer,
                extracted_answer=extracted_answer,
            )
            convo = prompt_messages + [dict(content=response_text, role="assistant")]
            return SingleEvalResult(
                html=html,
                score=score,
                convo=convo,
                metrics={language: score, latin_language: score},
            )

        results = common.map_with_progress(
            fn, self.examples, num_threads=self._num_threads
        )
        return common.aggregate_results(results, default_stats=("mean", "std"))
